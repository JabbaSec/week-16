Description: >
  Networking architecture

Parameters:
  VpcCidr:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/22

  StudentName:
    Type: String
    Default: student-name
  
  PubSubnetACidr:
    Description: IP range for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PubSubnetBCidr:
    Description: IP range for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivSubnetACidr:
    Description: IP range for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags: 
        - Key: Name
          Value: !Sub "${StudentName}-vpc"

  # Public Subnet A
  PubSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PubSubnetACidr
      AvailabilityZone: "eu-west-2a"
      Tags:
        - Key: Name
          Value: !Sub "${StudentName}-pub-subnet-a"

  # Public Subnet B
  PubSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PubSubnetBCidr
      AvailabilityZone: "eu-west-2b"
      Tags:
        - Key: Name
          Value: !Sub "${StudentName}-pub-subnet-b"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${StudentName}-igw"

  # VPC Gateway Attachment
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${StudentName}-pub-route-a"
      VpcId: !Ref MyVPC

  # Public Route
  PublicRouteA:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PubSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnetA

  PubSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnetB

# NAT Gateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PubSubnetA

# Private Subnet A
  PrivSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivSubnetACidr
      AvailabilityZone: "eu-west-2a"
      Tags:
        - Key: Name
          Value: !Sub "${StudentName}-priv-subnet-a"

# Private Route
  PrivRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${StudentName}-priv-route-a"
      VpcId: !Ref MyVPC

  PrivRouteA:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
       RouteTableId: !Ref PrivRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId: !Ref NatGateway

  PrivSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivRouteTable
      SubnetId: !Ref PrivSubnetA

# Demo Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-086b3de06dafe36c5
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PubSubnetA
      Tags:
        - Key: Name
          Value: !Sub "${StudentName}-demo"

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${StudentName}-load-balancer"
      Scheme: internet-facing
      Subnets:
        - !Ref PubSubnetA
        - !Ref PubSubnetB
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${StudentName}-load-balancer"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${StudentName}-target-group"
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref MyVPC

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic to the load balancer
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS traffic
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0