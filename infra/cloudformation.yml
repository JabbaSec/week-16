Description: >
  Networking architecture

# Parameters for easy editing
Parameters:
  StudentName:
    Type: String
    Default: student-name

# Create the VPC
Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/22

# Create the public subnet
  PubSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: eu-west-2a
      VpcId: !Ref MyVpc

# Create the private subnet
  PvtSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: eu-west-2b
      VpcId: !Ref MyVpc

# Create the Internet Gateway (IGW)
  MyIgw:
    Type: AWS::EC2::InternetGateway

# Attach the IGW to the VPC
  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref MyIgw

# Create the public route table
  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

# Create the NAT Gateway
  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref PubSubnetA
    DependsOn: MyEIP

# Create the private route table
  PvtRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc

# Add a route to the public route table for the internet
  PubRouteInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIgw

# Add a route to the private route table for the NAT gateway
  PvtRouteNat:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PvtRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway

# Create the network load balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Type: network
      Subnets:
        - !Ref PubSubnetA
        - !Ref PvtSubnetA

# Create the EC2 instance
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-086b3de06dafe36c5
      InstanceType: t2.micro
      KeyName: myKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref WebServerSecurityGroup
          SubnetId: !Ref PvtSubnetA
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "<h1>Welcome to my website!</h1>" > /var/www/html/index.html
          nohup python -m SimpleHTTPServer 8000 &
      Tags:
        - Key: Name
          Value: WebServerInstance

# Webserver Security Group
  WebServerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: WebServerSecurityGroup
        GroupDescription: Security group for web server instances
        VpcId: !Ref MyVpc
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8000
            ToPort: 8000
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0


# Connect the load balancer to the instances
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref MyVpc
