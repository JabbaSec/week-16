Parameters:
  VPCName:
    Description: CIDR range for our VPC
    Type: String
    Default: AAFNotes
  VPCCidr:
    Description: CIDR range for our VPC
    Type: String
    Default: 10.0.0.0/22
  PvtSubACidr:
    Description: Private Subnet IP Range
    Type: String
    Default: 10.0.0.0/24
  PvtSubBCidr:
    Description: Private Subnet IP Range
    Type: String
    Default: 10.0.1.0/24
  PubSubACidr:
    Description: Public Subnet IP Range
    Type: String
    Default: 10.0.2.0/24
  PubSubBCidr:
    Description: Public Subnet IP Range
    Type: String
    Default: 10.0.3.0/24
  AvailabilityZoneA:
    Description: Avaibalbility Zone 1
    Type: String
    Default: eu-west-2a
  AvailabilityZoneB:
    Description: Avaibalbility Zone 2
    Type: String
    Default: eu-west-2b

Resources:
# Create the VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VPCCidr
      Tags:
        -
          Key: Name
          Value: !Ref VPCName

# Create Public Subnets A&B
  PubSubA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: !Ref PubSubACidr
      MapPublicIpOnLaunch: true 
      Tags:
        -
          Key: Name
          Value: !Sub '${VPCName}-PubSubA'

  PubSubB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Ref AvailabilityZoneB
      CidrBlock: !Ref PubSubBCidr
      MapPublicIpOnLaunch: true
      Tags:
        -
          Key: Name
          Value: !Sub '${VPCName}-PubSubB'

# Create Private Subnets A&B
  PvtSubA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: !Ref PvtSubACidr 
      Tags:
        -
          Key: Name
          Value: !Sub '${VPCName}-PvtSubA'       

  PvtSubB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Ref AvailabilityZoneB
      CidrBlock: !Ref PvtSubBCidr
      Tags:
        -
          Key: Name
          Value: !Sub '${VPCName}-PvtSubB'    

# Create the Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

# Attach the Internet Gateway to the VPC
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

# Create the Public route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

# Add a route to the public route table for the internet
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubB
      RouteTableId: !Ref PublicRouteTable

  EIPa:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ElasticIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPa.AllocationId
      SubnetId: !Ref PubSubA

  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPb.AllocationId
      SubnetId: !Ref PubSubB

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateRouteToInternetA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  PrivateRouteToInternetB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB

  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PvtSubA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PvtSubB
      RouteTableId: !Ref PrivateRouteTableB
      
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-086b3de06dafe36c5
      InstanceType: t2.micro
      AvailabilityZone: !Ref AvailabilityZoneA
      SubnetId: !Ref PubSubA
      # KeyName: MyDemoEC2eyPair
      SecurityGroupIds: 
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: 
          !Sub |
          #!/bin/bash
          echo "<h1>Welcome to my website!</h1>" > /var/www/html/index.html
          nohup python -m SimpleHTTPServer 8000 &
            
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: SG to allow SSH and HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EC2-SG

Outputs:
  VPCId:
    Description: vpc id 
    Value: !Ref MyVPC
  PubSubA:
    Description: SubnetId of public subnet A
    Value: !Ref PubSubA
  PubSubB:
    Description: SubnetId of public subnet B
    Value: !Ref PubSubB 
  PvtSubA:
    Description: SubnetId of private subnet A
    Value: !Ref PvtSubA
  PvtSubB:
    Description: SubnetId of private subnet B
    Value: !Ref PubSubB 
  EC2InstanceId:
      Description: Demo Instance Id 
      Value: !Ref EC2Instance